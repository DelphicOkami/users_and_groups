---
- name: Manage facts in dictionaries
  set_fact:
    authorized_keys_dir: "{{ users_and_groups.authorized_keys_dir | default('') }}"

- name: Check for authorized keys duplication
  fail:
    msg: "User {{ item.value.name | default(item.key) }} cannot have authorized_keys and authorized_keys_file specified"
  with_dict: "{{ users_and_groups.users }}"
  when: (authorized_keys_dir is not none)
    and (item.value.state is not defined or item.value.state != "absent")
    and (item.value.authorized_keys_file is defined)
    and (item.value.authorized_keys is defined)

- name: Manage system groups
  become: yes
  group:
    gid: "{{ item.value.gid | default(omit) }}"
    name: "{{ item.value.name | default(item.key) }}"
    system: "{{ item.value.system | default(omit) }}"
  with_dict: "{{ users_and_groups.groups }}"

- name: Ensure /etc/sudoers.d exists
  become: yes
  file:
    path: /etc/sudoers.d
    state: directory
    owner: root
    group: root
    mode: 0750

- name: Enable include of /etc/sudoers.d
  become: yes
  lineinfile:
    name: /etc/sudoers
    regexp: "^#includedir"
    line: "#includedir /etc/sudoers.d"
    state: present

- name: Create sudoers config
  become: yes
  template:
    src: sudoers.j2
    dest: "/etc/sudoers.d/{{ item.value.name | default(item.key) }}}"
  with_dict: "{{ users_and_groups.sudoers }}"

- name: Create alternate authorized_keys directory
  become: yes
  file:
    path: "{{ authorized_keys_dir }}"
    owner: "root"
    group: "root"
    mode: 0755
    state: directory
  when: (authorized_keys_dir|bool)

- name: Create users
  include_tasks: create_user.yml
  with_dict: "{{ users_and_groups.users }}"
