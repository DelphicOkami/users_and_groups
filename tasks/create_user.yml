---
- name: Create {{ item.value.name | default(item.key) }} user
  become: yes
  user:
    comment: "{{ item.value.gecos | default(item.key) }}"
    createhome: "{{ item.value.createhome | default('yes') }}"
    home: "{{ item.value.home | default('/home/' ~ item.key) }}"
    group: "{{ item.value.group | default(omit) }}"
    groups: "{{ item.value.groups | default([ ]) | join(',') | default(omit) }}"
    name: "{{ item.value.name | default(item.key) }}"
    password: "{{ item.value.password | default(omit) }}"
    remove: "{{ 'yes' if item.value.state is defined and item.value.state == 'absent' else 'no' }}"
    shell: "{{ item.value.shell | default('/bin/bash') }}"
    state: "{{ item.value.state | default(omit) }}"
    system: "{{ item.value.system | default(omit) }}"
    uid: "{{ item.value.uid | default(omit) }}"

- name: Check if {{ item.value.name | default(item.key) }} has password
  shell: passwd --status {{ item.value.name | default(item.key) }} | awk '{ print $2 }' | grep 'NP\|L' > /dev/null
  ignore_errors: yes
  register: user_has_no_password
  changed_when: false
  when: ( item.value.password is not defined )
    and (
      ( item.value.state is not defined )
      or ( item.value.state != "absent" )
    )

- name: Reset {{ item.value.name | default(item.key) }}'s locked or absent password
  become: yes
  command: "usermod -p '{{ item.value.password | default() }}' {{ item.value.name | default(item.key) }}"
  when: ( item.value.password is not defined )
    and (
      ( item.value.state is not defined )
      or ( item.value.state != "absent" )
    )
    and ( user_has_no_password is defined )
    and ( user_has_no_password.rc is defined)
    and ( user_has_no_password.rc == 0 )
    and ( user_password_management )

- name: Expire new {{ item.value.name | default(item.key) }}'s password to prompt creation
  become: yes
  command: "chage -d 0 {{ item.value.name | default(item.key) }}"
  when: ( item.value.password is not defined )
    and (
      ( item.value.state is not defined )
      or ( item.value.state != "absent" )
    )
    and ( user_has_no_password is defined )
    and ( user_has_no_password.skipped is not defined or not user_has_no_password.skipped )
    and ( user_has_no_password.rc == 0 )

- name: Update {{ item.value.name | default(item.key) }}'s home directory permissions
  become: yes
  file:
    group: "{{ item.value.group | default(omit) }}"
    mode: 0750
    owner: "{{ item.value.name | default(item.key) }}"
    path: "{{ item.value.home | default('/home/' ~ item.key) }}"
    state: directory
  when: (item.value.state is not defined or item.value.state != "absent")
    and (item.value.createhome is not defined or item.value.createhome)

- name: Create .ssh directory in default {{ item.value.name | default(item.key) }} home directory
  become: yes
  file:
    path: /home/{{ item.value.name | default(item.key) }}/.ssh
    owner: "{{ item.value.name | default(item.key) }}"
    group: "{{ item.value.group | default(omit) }}"
    mode: 0700
    state: directory
  when: not (authorized_keys_dir|bool)
    and (item.value.state is not defined or item.value.state != "absent")

- name: Copy ssh auth key file to default location
  become: yes
  authorized_key:
    user: "{{ item.value.name | default(item.key) }}"
    key: "{{ lookup('file', item.value.authorized_keys_file) }}"
    manage_dir: yes
  when: not (authorized_keys_dir|bool)
    and (item.value.state is not defined or item.value.state != "absent")
    and (item.value.authorized_keys_file is defined)

- name: Copy ssh auth key file to alternate location
  become: yes
  authorized_key:
    user: "{{ item.value.name | default(item.key) }}"
    key: "{{ lookup('file', item.value.authorized_keys_file) }}"
    path: "{{ authorized_keys_dir }}/{{ item.value.name | default(item.key) }}"
    manage_dir: no
  when: (authorized_keys_dir|bool)
    and (item.value.state is not defined or item.value.state != "absent")
    and (item.value.authorized_keys_file is defined)

- name: Add ssh auth keys to default file
  become: yes
  template:
    src: authorized_keys.j2
    dest: "/home/{{ item.value.name | default(item.key) }}/.ssh/authorized_keys"
    owner: "{{ item.value.name | default(item.key) }}"
    group: "{{ item.value.group | default(omit) }}"
    mode: 0644
  when: not (authorized_keys_dir|bool)
    and (item.value.state is not defined or item.value.state != "absent")
    and (item.value.authorized_keys is defined)

- name: Add ssh auth key file to alternate file
  become: yes
  template:
    src: authorized_keys.j2
    dest: "{{ authorized_keys_dir }}/{{ item.value.name | default(item.key) }}"
    owner: "{{ item.value.name | default(item.key) }}"
    group: "{{ item.value.group | default(omit) }}"
    mode: 0644
  when: (authorized_keys_dir|bool)
    and (item.value.state is not defined or item.value.state != "absent")
    and (item.value.authorized_keys is defined)
